{"name":"my own Admin","tagline":"php,cms","body":"my own Admin\r\n============\r\n\r\n**What is my own Admin (moA) ?**\r\n\r\n\r\nA highly portable, simplified content administration system. It's like a super tiny Content Management System (CMS) yet\r\nintergrated seperately from your primary application / website\r\n\r\n**So this is another CMS?**\r\n\r\nNO, this doesn't provide any kinda service or feature of a standard CMS\r\n\r\n**Then what does it give?**\r\n\r\nIt gives a higly customizable class which can change its form dynamically to represent any object you need\r\n\r\nex: \r\nIt can represent a Post in your page\r\n    \r\nBetter; it can represent Page in your site\r\n    \r\nEven better; it can represent your SITE !!\r\n    \r\nYet, all of them are optional, you can control its behaviour 100%\r\n\r\n**What are the mandatory files for the system?**\r\n\r\nOnly moa.php and config.php\r\n\r\n**How to use those?**\r\n\r\nLet's start\r\n\r\n\r\nUsage\r\n=====\r\n\r\n1.\tDownload all above files\r\n2.\tpost.php is a script written to give a moA object a 'Post' like behaviour. It means once you include the post.php,\r\nyou can easily add, delete, update or retrieve Posts from your database.\r\n3.\tPost is only a moO (my own Object) that can be adapted dynamically to represent many real world application such as post in a site, a web page, a user etc.\r\n4.\tChange the config.php variables to suit your database requirement\r\n\r\nNOTE: you can also replace the query methods in the file since all the queries done by moA objects process through them :) <- PORTABILITY\r\n\r\nmoA classes\r\n-----------\r\n\r\nmoA (my own Admin) class  : the main system where all action happens\r\nmoO (my own Object) class : an abstract class which can represent anything, this is used to keep track of objects by moA \r\n\r\nmoA default methods\r\n-------------------\r\n\r\n**constructor($table,$cfg,$primary)**\r\n\r\n<pre>\r\n$table\t: the name of the table to which record manipulation should be done\r\n\r\n$cfg \t: an array resenting the class variables => table fields\r\n\t  ex: \r\n\t  Let's assume our table structure to be\r\n</pre>\r\n\t  \r\n```\r\n\t  +--------+-----------+------+-----+-------------------+----------------+\r\n\t\t| Field  | Type      | Null | Key | Default           | Extra          |\r\n\t\t+--------+-----------+------+-----+-------------------+----------------+\r\n\t\t| ID     | int(11)   | NO   | PRI | NULL              | auto_increment |\r\n\t\t| Title  | longtext  | NO   |     | NULL              |                |\r\n\t\t| Post   | longtext  | NO   |     | NULL              |                |\r\n\t\t| Parent | int(11)   | NO   |     | NULL              |                |\r\n\t\t| Dtime  | timestamp | NO   |     | CURRENT_TIMESTAMP |                |\r\n\t\t+--------+-----------+------+-----+-------------------+----------------+\r\n```\r\n\r\n  our config can be defined as \r\n\t\r\n```php\r\n\t$cfg = array(\r\n                'pid' => 'ID',\r\n                'title' => 'Title',\r\n                'post' => 'Post',\r\n                'parent' => 'Parent',\r\n                'dtime' =>  'Dtime'        \r\n            );\r\n```\r\n\r\n<pre>            \r\nNOTE: Array keys are what you would like to call them in an object. You are free to relace them but array values should be exactly matching to those field of the given table\r\nlike $post->title, $post->pid\r\n\r\n$primary : primary key of the table, this will be the unique identification of the object\r\n</pre>\r\n\r\n**init($params)**\r\n\r\n<pre>\r\nMethod that would put actual values to the instance properties of moO\r\n\r\n$params\t: array consisting of the keys defined in $cfg as keys and the values to put in table as values of the array\r\n\t  ex: we can initialize a demo post as\r\n</pre>\r\n\r\n```php\r\n\t  $params = array(\r\n                'title' => 'My new Title',\r\n                'post' => 'These are the post content',\r\n                'parent' => '0'        \r\n            );\r\n```  \r\n            NOTE: you can leave out any field that you donot want to initialize like ID, Date\r\n\r\n  \r\n**add($moo)**\r\n\r\n<pre>\r\nAdd a record to the table correspoding to the given moO object\r\n\r\n$moo \t: moO Object\r\n</pre>\r\n\r\n**getAll()**\r\n\r\n<pre>\r\nReturn an array of moO objects corresponding to all the records in the table\r\n</pre>\r\n\r\n**getByField($field,$value)**\r\n\r\n<pre>\r\nReturn an array of moO objects [or a single moO object is only 1 record is found]\r\n\r\n$field\t: table field to match a property\r\n$value\t: value to be matched\r\n</pre>\r\n\r\n**delete($moo)**\r\n\r\n<pre>\r\nDelete the table record corresponding to the given $moo object\r\n\r\n$moo\t: moO Object\r\n</pre>\r\n\r\n**deleteByField($field,$value)**\r\n\r\n<pre>\r\nDelete all the table records corresponding to the given field/value pair\r\n</pre>\r\n\r\n**update($moo)**\r\n\r\n<pre>\r\nUpdate the record corresponding to the $moo objects with the changed values\r\n\r\n$moo\t: moO Object\r\n</pre>\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}